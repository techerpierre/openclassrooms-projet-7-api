generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum UserStatus {
  DEFAULT
  OWNER
}

enum UserRole {
  CLIENT
  ADMIN
}

// MAIN MODELS

model User {
  id String @id @default(uuid())
  email String @unique
  password String
  firstname String?
  lastname String?
  picture String?
  status UserStatus @default(DEFAULT)
  role UserRole @default(CLIENT)
  accomodations Accomodation[]
  ratings Rating[]
  authorizationsId String
  authorizations Authorizations @relation(fields: [authorizationsId], references: [id])
}

model Accomodation {
  id String @id @default(uuid())
  title String
  cover String
  pictures String[]
  description String
  ownerId String
  owner User @relation(fields: [ownerId], references: [id])
  ratings Rating[]
  location String
  equipements String[]
  tags String[]
}

model Authorizations {
  id String @id
  listAccomodation Boolean @default(false)
  createAccomodation Boolean @default(false)
  deleteAccomodation Boolean @default(false)
  findAccomodation Boolean @default(false)
  searchAccomodation Boolean @default(false)
  users User[]
}

// SECONDARY MODELS (ex: for autocompletion)

model Rating {
  id String @id @default(uuid())
  value Int
  userId String
  user User @relation(fields: [userId], references: [id])
  accomodationId String
  accomodation Accomodation @relation(fields: [accomodationId], references: [id])
}

model Tag {
  id String @id @default(uuid())
  value String
}

model Equipments {
  id String @id @default(uuid())
  value String
}
